libuv to control system and O/S. It a node core composed by C++.
It has an event loop. Keep searching the event from V8 engine.
Then, makes a que to control thhose events. The event que lines up 
    in order when it occurs.
Actually, V8 engine runs in synchronous but it has asynchronous functions
that are events to be sent "libuv" liblary. In other words, the main reason
V8 engine is able to define asynchronous functins is because the core libuv exists
to manage the asynchronous function in the background.

Non blocking running : V8 engine is composed of non-blocking codes that execute
synchronously. The asynchronous events are not interupt the execution.

Buffer: holding the data in some part of memory before the data reaches to 
the designated destination.


// "Stream" is a child of "eventEmitter" which is a property of "events"
const EE = require('events').eventEmitter;
const util = require('util');

// Stream is inherited from EE
util.inherits(Stream, EE);

// Readable stream (Read only), 
// Therefore '_stream_readable' is also inherited.
Stream.Readable = require('_stream_readable');

// Write only (Not Readable)
// Therefore '_stream_writable' is also inherited.
Stream.Writable = require('_stream_writable');

// Readable and Writable
// Therefore '_stream_duplex' is also inherited.
Stream.Duplex = require('_stream_duplex');

// Transoformable Data (manipulating); Then same as above
Stream.Transform= require('_stream_Transform');

// PassThrough , Then Same as above
Stream.PassThrough = require('_stream_PassTrough');

// Abstract (Base) Class 
A type of constructor we never work directy with, but inherits.
We create new custom objects which inherit from the abstract base class

Lorem ipsum dolor sit amet.